<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Golang on 樊尘刹记</title><link>//localhost:1313/tags/golang/</link><description>Recent content in Golang on 樊尘刹记</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Sat, 01 Oct 2022 00:00:00 +0000</lastBuildDate><atom:link href="//localhost:1313/tags/golang/rss.xml" rel="self" type="application/rss+xml"/><item><title>Golang入门笔记-CH01-Go语言介绍与安装</title><link>//localhost:1313/post/%E7%A8%8B%E6%8A%80/golang/golang%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-ch01-go%E8%AF%AD%E8%A8%80%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%AE%89%E8%A3%85/</link><pubDate>Sat, 01 Oct 2022 00:00:00 +0000</pubDate><guid>//localhost:1313/post/%E7%A8%8B%E6%8A%80/golang/golang%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-ch01-go%E8%AF%AD%E8%A8%80%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%AE%89%E8%A3%85/</guid><description>&lt;h2 id="1-go-语言介绍">1. Go 语言介绍
&lt;a class="header-anchor" href="#1-go-%e8%af%ad%e8%a8%80%e4%bb%8b%e7%bb%8d">&lt;/a>
&lt;/h2>&lt;h2 id="11-go-语言的发展">1.1 Go 语言的发展
&lt;a class="header-anchor" href="#11-go-%e8%af%ad%e8%a8%80%e7%9a%84%e5%8f%91%e5%b1%95">&lt;/a>
&lt;/h2>&lt;p>Go 语言又称 Golang，起源于 2007 年，来自于谷歌内部的一个项目，于 2009 年正式对外发布。创始团队有三人，都是计算机界的大佬：&lt;/p></description></item><item><title>Golang入门笔记-CH02-Go语言基本语法和结构</title><link>//localhost:1313/post/%E7%A8%8B%E6%8A%80/golang/golang%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-ch02-go%E8%AF%AD%E8%A8%80%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E5%92%8C%E7%BB%93%E6%9E%84/</link><pubDate>Sat, 01 Oct 2022 00:00:00 +0000</pubDate><guid>//localhost:1313/post/%E7%A8%8B%E6%8A%80/golang/golang%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-ch02-go%E8%AF%AD%E8%A8%80%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E5%92%8C%E7%BB%93%E6%9E%84/</guid><description>&lt;h2 id="1-命名规范">1. 命名规范
&lt;a class="header-anchor" href="#1-%e5%91%bd%e5%90%8d%e8%a7%84%e8%8c%83">&lt;/a>
&lt;/h2>&lt;h2 id="11-文件">1.1 文件
&lt;a class="header-anchor" href="#11-%e6%96%87%e4%bb%b6">&lt;/a>
&lt;/h2>&lt;p>Go 语言中，源文件以 &lt;code>.go&lt;/code> 格式保存，例如 &lt;code>main.go&lt;/code>，且文件名只能由&lt;strong>小写字母&lt;/strong>组成，若有多个单词，可以用下划线 &lt;code>_&lt;/code> 进行拼接，例如 &lt;code>my_file.go&lt;/code>。&lt;/p>
&lt;h2 id="12-标识符">1.2 标识符
&lt;a class="header-anchor" href="#12-%e6%a0%87%e8%af%86%e7%ac%a6">&lt;/a>
&lt;/h2>&lt;p>Go 语言中，标识符是区分&lt;strong>大小写&lt;/strong>的，标识符必须以字符或 &lt;code>_&lt;/code> 开头，后面可以跟 0 个或多个字符（字母、数字以及其他符号），例如 &lt;code>_&lt;/code>，&lt;code>_abc&lt;/code>，&lt;code>a1&lt;/code>，&lt;code>b_2&lt;/code>。同时标识符不能是 Go 语言中的&lt;strong>保留关键字&lt;/strong>，不能以&lt;strong>数字开头&lt;/strong>，也不能有&lt;strong>运算符&lt;/strong>。&lt;/p></description></item><item><title>Golang入门笔记-CH03-Go语言基本数据类型</title><link>//localhost:1313/post/%E7%A8%8B%E6%8A%80/golang/golang%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-ch03-go%E8%AF%AD%E8%A8%80%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link><pubDate>Sat, 01 Oct 2022 00:00:00 +0000</pubDate><guid>//localhost:1313/post/%E7%A8%8B%E6%8A%80/golang/golang%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-ch03-go%E8%AF%AD%E8%A8%80%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid><description>&lt;h2 id="1-常量">1. 常量
&lt;a class="header-anchor" href="#1-%e5%b8%b8%e9%87%8f">&lt;/a>
&lt;/h2>&lt;h2 id="11-常量的定义">1.1 常量的定义
&lt;a class="header-anchor" href="#11-%e5%b8%b8%e9%87%8f%e7%9a%84%e5%ae%9a%e4%b9%89">&lt;/a>
&lt;/h2>&lt;p>常量是一种特殊的变量，被初始化之后就无法再改变。&lt;/p>
&lt;p>Go 语言中，常量的类型只能是&lt;strong>布尔型&lt;/strong>，&lt;strong>数字型（整型、浮点型和复数）&lt;strong>和&lt;/strong>字符串型&lt;/strong>。&lt;/p>
&lt;p>常量可以使用关键字 &lt;code>const&lt;/code> 来定义，定义格式为 &lt;code>const variable [type] = value&lt;/code>。&lt;/p></description></item><item><title>Golang入门笔记-CH04-Go语言流程控制</title><link>//localhost:1313/post/%E7%A8%8B%E6%8A%80/golang/golang%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-ch04-go%E8%AF%AD%E8%A8%80%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</link><pubDate>Sat, 01 Oct 2022 00:00:00 +0000</pubDate><guid>//localhost:1313/post/%E7%A8%8B%E6%8A%80/golang/golang%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-ch04-go%E8%AF%AD%E8%A8%80%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</guid><description>&lt;h2 id="前言">前言
&lt;a class="header-anchor" href="#%e5%89%8d%e8%a8%80">&lt;/a>
&lt;/h2>&lt;p>流程控制是每门语言控制程序逻辑和执行顺序的重要组成部分，Go 语言中常见的流程控制有 &lt;code>if&lt;/code>，&lt;code>for&lt;/code>，&lt;code>switch&lt;/code>；&lt;code>break&lt;/code>、&lt;code>continue&lt;/code> 和 &lt;code>goto&lt;/code> 是为了简化流程控制，降低代码复杂度。&lt;/p></description></item><item><title>Golang入门笔记-CH05-数组和切片</title><link>//localhost:1313/post/%E7%A8%8B%E6%8A%80/golang/golang%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-ch05-%E6%95%B0%E7%BB%84%E5%92%8C%E5%88%87%E7%89%87/</link><pubDate>Sat, 01 Oct 2022 00:00:00 +0000</pubDate><guid>//localhost:1313/post/%E7%A8%8B%E6%8A%80/golang/golang%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-ch05-%E6%95%B0%E7%BB%84%E5%92%8C%E5%88%87%E7%89%87/</guid><description>&lt;h2 id="数组">数组
&lt;a class="header-anchor" href="#%e6%95%b0%e7%bb%84">&lt;/a>
&lt;/h2>&lt;h3 id="初始化">初始化
&lt;a class="header-anchor" href="#%e5%88%9d%e5%a7%8b%e5%8c%96">&lt;/a>
&lt;/h3>&lt;p>数组可以保存&lt;strong>指定长度&lt;/strong>的多个数据，且这些数据的类型都&lt;strong>相同&lt;/strong>，数据类型可以是原始类型，如整型和字符串等，也可以是自定义类型。&lt;/p>
&lt;p>数组通过&lt;strong>索引&lt;/strong>来访问元素，索引从 &lt;code>0&lt;/code> 开始，第一个元素的索引为 &lt;code>0&lt;/code>，第二个为 &lt;code>1&lt;/code>，依此类推。&lt;/p></description></item><item><title>Golang入门笔记-CH06-Map</title><link>//localhost:1313/post/%E7%A8%8B%E6%8A%80/golang/golang%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-ch06-map/</link><pubDate>Sat, 01 Oct 2022 00:00:00 +0000</pubDate><guid>//localhost:1313/post/%E7%A8%8B%E6%8A%80/golang/golang%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-ch06-map/</guid><description>&lt;h2 id="声明和初始化-map">声明和初始化 Map
&lt;a class="header-anchor" href="#%e5%a3%b0%e6%98%8e%e5%92%8c%e5%88%9d%e5%a7%8b%e5%8c%96-map">&lt;/a>
&lt;/h2>&lt;p>&lt;code>map&lt;/code> 是一种特殊的数据结构，通过键 &lt;code>key&lt;/code> 和值 &lt;code>value&lt;/code> 来保存数据，可以快速地根据 &lt;code>key&lt;/code> 找到其对应的 &lt;code>value&lt;/code>，与 &lt;code>python&lt;/code> 中的字典和 &lt;code>Java&lt;/code> 中的 &lt;code>HashMap&lt;/code> 类似。&lt;/p>
&lt;p>&lt;code>map&lt;/code> 是&lt;strong>引用类型&lt;/strong>，声明方式如下：&lt;/p></description></item><item><title>Golang入门笔记-CH07-结构体和方法</title><link>//localhost:1313/post/%E7%A8%8B%E6%8A%80/golang/golang%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-ch07-%E7%BB%93%E6%9E%84%E4%BD%93%E5%92%8C%E6%96%B9%E6%B3%95/</link><pubDate>Sat, 01 Oct 2022 00:00:00 +0000</pubDate><guid>//localhost:1313/post/%E7%A8%8B%E6%8A%80/golang/golang%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-ch07-%E7%BB%93%E6%9E%84%E4%BD%93%E5%92%8C%E6%96%B9%E6%B3%95/</guid><description>&lt;p>Go 语言通过 定义结构体来支持用户自定义类型。一个结构体代表现实世界中的一个实体，类似于 Java 中的实体类。当要定义一个类型时，这个类型包含很多属性，例如定义一个用户类型，用户类型中包含用户名、密码和生日等属性，就可以使用结构体。&lt;/p></description></item><item><title>Golang入门笔记-CH08-接口</title><link>//localhost:1313/post/%E7%A8%8B%E6%8A%80/golang/golang%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-ch08-%E6%8E%A5%E5%8F%A3/</link><pubDate>Sat, 01 Oct 2022 00:00:00 +0000</pubDate><guid>//localhost:1313/post/%E7%A8%8B%E6%8A%80/golang/golang%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-ch08-%E6%8E%A5%E5%8F%A3/</guid><description>&lt;h2 id="1-使用接口的原因">1. 使用接口的原因
&lt;a class="header-anchor" href="#1-%e4%bd%bf%e7%94%a8%e6%8e%a5%e5%8f%a3%e7%9a%84%e5%8e%9f%e5%9b%a0">&lt;/a>
&lt;/h2>&lt;p>我们来看一段代码：&lt;/p>

&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="hl-0-1">&lt;a class="lnlinks" href="#hl-0-1"> 1&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-2">&lt;a class="lnlinks" href="#hl-0-2"> 2&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-3">&lt;a class="lnlinks" href="#hl-0-3"> 3&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-4">&lt;a class="lnlinks" href="#hl-0-4"> 4&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-5">&lt;a class="lnlinks" href="#hl-0-5"> 5&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-6">&lt;a class="lnlinks" href="#hl-0-6"> 6&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-7">&lt;a class="lnlinks" href="#hl-0-7"> 7&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-8">&lt;a class="lnlinks" href="#hl-0-8"> 8&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-9">&lt;a class="lnlinks" href="#hl-0-9"> 9&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-10">&lt;a class="lnlinks" href="#hl-0-10">10&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-11">&lt;a class="lnlinks" href="#hl-0-11">11&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-12">&lt;a class="lnlinks" href="#hl-0-12">12&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-13">&lt;a class="lnlinks" href="#hl-0-13">13&lt;/a>
&lt;/span>&lt;span class="lnt" id="hl-0-14">&lt;a class="lnlinks" href="#hl-0-14">14&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">Cat&lt;/span> &lt;span class="kd">struct&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span> &lt;span class="nx">Cat&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Say&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;喵喵喵&amp;#34;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">Dog&lt;/span> &lt;span class="kd">struct&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">d&lt;/span> &lt;span class="nx">Dog&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">Say&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;汪汪汪&amp;#34;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">	&lt;span class="nx">c&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">Cat&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">	&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;猫:&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Say&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">	&lt;span class="nx">d&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">Dog&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">	&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;狗:&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">d&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Say&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>

&lt;p>上述代码中定义了狗 &lt;code>Dog&lt;/code> 和猫 &lt;code>Cat&lt;/code> 以及它们对应的方法 &lt;code>Say()&lt;/code>，若要继续添加鸭 &lt;code>Duck&lt;/code> 方法和其对应的方法 &lt;code>Say()&lt;/code>，重复代码会非常多。我们可不可以从这三种动物类型中抽象出方法 &lt;code>Say()&lt;/code>，这就是接口的作用，接口可以定义抽象方法，来规范我们的代码。&lt;/p></description></item><item><title>Golang入门笔记-CH09-反射</title><link>//localhost:1313/post/%E7%A8%8B%E6%8A%80/golang/golang%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-ch09-%E5%8F%8D%E5%B0%84/</link><pubDate>Sat, 01 Oct 2022 00:00:00 +0000</pubDate><guid>//localhost:1313/post/%E7%A8%8B%E6%8A%80/golang/golang%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-ch09-%E5%8F%8D%E5%B0%84/</guid><description>&lt;p>反射是用程序检查其所拥有的结构，尤其是类型的一种能力。反射可以在运行时（不必在编译时）检查类型和变量，例如大小、变量、方法和动态调用这些方法。&lt;/p></description></item><item><title>Golang入门笔记-CH10-函数高级特性</title><link>//localhost:1313/post/%E7%A8%8B%E6%8A%80/golang/golang%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-ch10-%E5%87%BD%E6%95%B0%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/</link><pubDate>Sat, 01 Oct 2022 00:00:00 +0000</pubDate><guid>//localhost:1313/post/%E7%A8%8B%E6%8A%80/golang/golang%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-ch10-%E5%87%BD%E6%95%B0%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/</guid><description>&lt;h2 id="传递变长参数">传递变长参数
&lt;a class="header-anchor" href="#%e4%bc%a0%e9%80%92%e5%8f%98%e9%95%bf%e5%8f%82%e6%95%b0">&lt;/a>
&lt;/h2>&lt;p>如果函数最后一个参数采用 &lt;code>...type&lt;/code> 的形式，那么这个函数就可以处理一个变长参数（长度可以为 0），这样的函数被称为变参函数，如：&lt;/p>

&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt" id="hl-0-1">&lt;a class="lnlinks" href="#hl-0-1">1&lt;/a>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">myFunc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">args&lt;/span> &lt;span class="o">...&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>

&lt;p>如果参数存储在切片 &lt;code>arr&lt;/code> 中，可以用 &lt;code>arr...&lt;/code> 来传递参数，如：&lt;/p></description></item><item><title>Golang入门笔记-CH11-错误处理</title><link>//localhost:1313/post/%E7%A8%8B%E6%8A%80/golang/golang%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-ch11-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</link><pubDate>Sat, 01 Oct 2022 00:00:00 +0000</pubDate><guid>//localhost:1313/post/%E7%A8%8B%E6%8A%80/golang/golang%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-ch11-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</guid><description>&lt;p>Go 没有像 Java 那样的 &lt;code>try/catch&lt;/code> 异常处理机制，而是用 &lt;code>defer/panic/recover&lt;/code> 机制来处理异常。&lt;/p>
&lt;p>Go 语言的设计者认为 &lt;code>try/catch&lt;/code> 机制使用过于泛滥，而且从底层向高层抛出错误太耗费资源，因此他给 Go 语言设计了一种&lt;strong>返回值处理错误方式&lt;/strong>：通过在函数和方法中返回错误对象，这个错误对象一般在多个返回值的最后；如果返回 &lt;code>nil&lt;/code>，则表明没有错误，且主调函数应该检查并处理每一个错误。&lt;/p></description></item><item><title>Golang入门笔记-CH12-并发</title><link>//localhost:1313/post/%E7%A8%8B%E6%8A%80/golang/golang%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-ch12-%E5%B9%B6%E5%8F%91/</link><pubDate>Sat, 01 Oct 2022 00:00:00 +0000</pubDate><guid>//localhost:1313/post/%E7%A8%8B%E6%8A%80/golang/golang%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0-ch12-%E5%B9%B6%E5%8F%91/</guid><description>&lt;h2 id="基本概念">基本概念
&lt;a class="header-anchor" href="#%e5%9f%ba%e6%9c%ac%e6%a6%82%e5%bf%b5">&lt;/a>
&lt;/h2>&lt;h3 id="线程和进程">线程和进程
&lt;a class="header-anchor" href="#%e7%ba%bf%e7%a8%8b%e5%92%8c%e8%bf%9b%e7%a8%8b">&lt;/a>
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>进程&lt;/strong> ：是程序在操作系统中的一次执行过程，系统进行资源分配和调度的一个 &lt;strong>独立单位&lt;/strong> 。&lt;/li>
&lt;li>&lt;strong>线程&lt;/strong> ：是进程的一个执行实体，是 CPU 调度和分派的 &lt;strong>基本单位&lt;/strong> ，它是比进程更小的能独立运行的 &lt;strong>基本单位&lt;/strong> 。&lt;/li>
&lt;/ul>
&lt;p>一个进程可以创建或撤销多个线程；同一个进程中的多个线程之间可以并发执行。&lt;/p></description></item></channel></rss>